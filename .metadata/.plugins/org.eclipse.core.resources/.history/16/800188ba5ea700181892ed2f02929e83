import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Semaphore;

enum DownLoader {

	INSTANCE;

	private Semaphore semaphore = new Semaphore(2, true);

	public void downloadData() {
try {
	Thread.sleep(3000);
} catch (InterruptedException e1) {
	// TODO Auto-generated catch block
	e1.printStackTrace();
}
		try {
			semaphore.acquire();
			download();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			semaphore.release();
		}

	}

	private void download() {
		System.out.println("DownLoading ");

	}
}

public class SemaphoreExample {

public static void main(String[] args) {
	ExecutorService executorService = Executors.newCachedThreadPool();	

for(int i =0; i<12 ; i++)
{
	executorService.execute(new Runnable() {
		
		@Override
		public void run() {
			DownLoader.INSTANCE.downloadData();
			
		}
	});
}
	
}
}
