

import java.util.concurrent.BrokenBarrierException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.CyclicBarrier;

public class CyclicBarrierExample {
CyclicBarrier barrier = new CyclicBarrier(5, new Runnable() {
	public static void main(String[] args) {
		
	
	@Override
	public void run() {
		
		System.out.println("after running all task ");
	}
});
		ExecutorService service = Executors.newCachedThreadPool();
		for (int i = 0; i < 5; i++) {
			service.execute(new Worker1(i + 1, barrier));
		}
try {
	barrier.await();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (BrokenBarrierException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

		System.out.println("All task completed then only Run");
	}
}


class Worker1 implements Runnable {
	private int Id;
	private CyclicBarrier barrier;

	public Worker1(int Id, CyclicBarrier barrier) {
		this.Id= Id;
		this.barrier = barrier;
	}

	private void doWork() {
		System.out.println(Id);

	}

	@Override
	public void run() {
		doWork();
		
	}
}